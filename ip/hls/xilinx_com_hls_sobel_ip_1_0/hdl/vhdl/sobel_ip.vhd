-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_ip is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    p_src_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    p_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    p_dst_x_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_x_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_x_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_x_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_x_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_x_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_x_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_y_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_y_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_y_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_y_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_y_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_y_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_dst_y_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_src_TVALID : IN STD_LOGIC;
    p_src_TREADY : OUT STD_LOGIC;
    p_dst_x_TVALID : OUT STD_LOGIC;
    p_dst_x_TREADY : IN STD_LOGIC;
    p_dst_y_TVALID : OUT STD_LOGIC;
    p_dst_y_TREADY : IN STD_LOGIC );
end;


architecture behav of sobel_ip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel_ip,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=13.077250,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=1679,HLS_SYN_LUT=4244,HLS_VERSION=2018_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal width : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit101_pr_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_start_full_n : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_start_out : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_start_write : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_imgInput1_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit101_pr_U0_imgInput1_rows_out_write : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_imgInput1_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit101_pr_U0_imgInput1_cols_out_write : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_imgOutput1_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit101_pr_U0_imgOutput1_rows_out_write : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_imgOutput1_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit101_pr_U0_imgOutput1_cols_out_write : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_imgOutput2_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit101_pr_U0_imgOutput2_rows_out_write : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_imgOutput2_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit101_pr_U0_imgOutput2_cols_out_write : STD_LOGIC;
    signal AXIvideo2xfMat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2xfMat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2xfMat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2xfMat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2xfMat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2xfMat_U0_p_src_TREADY : STD_LOGIC;
    signal AXIvideo2xfMat_U0_img_rows_read : STD_LOGIC;
    signal AXIvideo2xfMat_U0_img_cols_read : STD_LOGIC;
    signal AXIvideo2xfMat_U0_img_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2xfMat_U0_img_data_V_write : STD_LOGIC;
    signal AXIvideo2xfMat_U0_img_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2xfMat_U0_img_rows_out_write : STD_LOGIC;
    signal AXIvideo2xfMat_U0_img_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2xfMat_U0_img_cols_out_write : STD_LOGIC;
    signal sobel_accel_U0_ap_start : STD_LOGIC;
    signal sobel_accel_U0_ap_done : STD_LOGIC;
    signal sobel_accel_U0_ap_continue : STD_LOGIC;
    signal sobel_accel_U0_ap_idle : STD_LOGIC;
    signal sobel_accel_U0_ap_ready : STD_LOGIC;
    signal sobel_accel_U0_start_out : STD_LOGIC;
    signal sobel_accel_U0_start_write : STD_LOGIC;
    signal sobel_accel_U0_p_src_rows_read : STD_LOGIC;
    signal sobel_accel_U0_p_src_cols_read : STD_LOGIC;
    signal sobel_accel_U0_p_src_data_V_read : STD_LOGIC;
    signal sobel_accel_U0_p_dstgx_rows_read : STD_LOGIC;
    signal sobel_accel_U0_p_dstgx_cols_read : STD_LOGIC;
    signal sobel_accel_U0_p_dstgx_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_accel_U0_p_dstgx_data_V_write : STD_LOGIC;
    signal sobel_accel_U0_p_dstgy_cols_read : STD_LOGIC;
    signal sobel_accel_U0_p_dstgy_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_accel_U0_p_dstgy_data_V_write : STD_LOGIC;
    signal sobel_accel_U0_p_dstgx_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_accel_U0_p_dstgx_rows_out_write : STD_LOGIC;
    signal sobel_accel_U0_p_dstgx_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_accel_U0_p_dstgx_cols_out_write : STD_LOGIC;
    signal sobel_accel_U0_p_dstgy_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_accel_U0_p_dstgy_cols_out_write : STD_LOGIC;
    signal xfMat2AXIvideo57_U0_ap_start : STD_LOGIC;
    signal xfMat2AXIvideo57_U0_ap_done : STD_LOGIC;
    signal xfMat2AXIvideo57_U0_ap_continue : STD_LOGIC;
    signal xfMat2AXIvideo57_U0_ap_idle : STD_LOGIC;
    signal xfMat2AXIvideo57_U0_ap_ready : STD_LOGIC;
    signal xfMat2AXIvideo57_U0_img_rows_read : STD_LOGIC;
    signal xfMat2AXIvideo57_U0_img_cols_read : STD_LOGIC;
    signal xfMat2AXIvideo57_U0_img_data_V_read : STD_LOGIC;
    signal xfMat2AXIvideo57_U0_p_dst_x_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal xfMat2AXIvideo57_U0_p_dst_x_TVALID : STD_LOGIC;
    signal xfMat2AXIvideo57_U0_p_dst_x_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo57_U0_p_dst_x_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo57_U0_p_dst_x_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo57_U0_p_dst_x_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo57_U0_p_dst_x_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo57_U0_p_dst_x_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal xfMat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal xfMat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal xfMat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal xfMat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal xfMat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal xfMat2AXIvideo_U0_img_rows_read : STD_LOGIC;
    signal xfMat2AXIvideo_U0_img_cols_read : STD_LOGIC;
    signal xfMat2AXIvideo_U0_img_data_V_read : STD_LOGIC;
    signal xfMat2AXIvideo_U0_p_dst_y_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal xfMat2AXIvideo_U0_p_dst_y_TVALID : STD_LOGIC;
    signal xfMat2AXIvideo_U0_p_dst_y_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_U0_p_dst_y_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_U0_p_dst_y_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_U0_p_dst_y_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_U0_p_dst_y_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal xfMat2AXIvideo_U0_p_dst_y_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal imgInput1_rows_c_full_n : STD_LOGIC;
    signal imgInput1_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput1_rows_c_empty_n : STD_LOGIC;
    signal imgInput1_cols_c_full_n : STD_LOGIC;
    signal imgInput1_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput1_cols_c_empty_n : STD_LOGIC;
    signal imgOutput1_rows_c_full_n : STD_LOGIC;
    signal imgOutput1_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput1_rows_c_empty_n : STD_LOGIC;
    signal imgOutput1_cols_c_full_n : STD_LOGIC;
    signal imgOutput1_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput1_cols_c_empty_n : STD_LOGIC;
    signal imgOutput2_rows_c_full_n : STD_LOGIC;
    signal imgOutput2_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput2_rows_c_empty_n : STD_LOGIC;
    signal imgOutput2_cols_c_full_n : STD_LOGIC;
    signal imgOutput2_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput2_cols_c_empty_n : STD_LOGIC;
    signal imgInput1_data_V_cha_full_n : STD_LOGIC;
    signal imgInput1_data_V_cha_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imgInput1_data_V_cha_empty_n : STD_LOGIC;
    signal imgInput1_rows_c11_full_n : STD_LOGIC;
    signal imgInput1_rows_c11_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput1_rows_c11_empty_n : STD_LOGIC;
    signal imgInput1_cols_c12_full_n : STD_LOGIC;
    signal imgInput1_cols_c12_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput1_cols_c12_empty_n : STD_LOGIC;
    signal imgOutput1_data_V_ch_full_n : STD_LOGIC;
    signal imgOutput1_data_V_ch_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imgOutput1_data_V_ch_empty_n : STD_LOGIC;
    signal imgOutput2_data_V_ch_full_n : STD_LOGIC;
    signal imgOutput2_data_V_ch_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imgOutput2_data_V_ch_empty_n : STD_LOGIC;
    signal imgOutput1_rows_c13_full_n : STD_LOGIC;
    signal imgOutput1_rows_c13_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput1_rows_c13_empty_n : STD_LOGIC;
    signal imgOutput1_cols_c14_full_n : STD_LOGIC;
    signal imgOutput1_cols_c14_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput1_cols_c14_empty_n : STD_LOGIC;
    signal imgOutput2_cols_c15_full_n : STD_LOGIC;
    signal imgOutput2_cols_c15_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal imgOutput2_cols_c15_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_AXIvideo2xfMat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2xfMat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2xfMat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Block_Mat_exit101_pr_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_Mat_exit101_pr_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit101_pr_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_sobel_accel_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sobel_accel_U0_full_n : STD_LOGIC;
    signal start_for_sobel_accel_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sobel_accel_U0_empty_n : STD_LOGIC;
    signal start_for_xfMat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xfMat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_xfMat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xfMat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal AXIvideo2xfMat_U0_start_full_n : STD_LOGIC;
    signal AXIvideo2xfMat_U0_start_write : STD_LOGIC;
    signal start_for_xfMat2AXIvideo57_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xfMat2AXIvideo57_U0_full_n : STD_LOGIC;
    signal start_for_xfMat2AXIvideo57_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xfMat2AXIvideo57_U0_empty_n : STD_LOGIC;
    signal xfMat2AXIvideo57_U0_start_full_n : STD_LOGIC;
    signal xfMat2AXIvideo57_U0_start_write : STD_LOGIC;
    signal xfMat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal xfMat2AXIvideo_U0_start_write : STD_LOGIC;

    component Block_Mat_exit101_pr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (31 downto 0);
        width : IN STD_LOGIC_VECTOR (31 downto 0);
        imgInput1_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgInput1_rows_out_full_n : IN STD_LOGIC;
        imgInput1_rows_out_write : OUT STD_LOGIC;
        imgInput1_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgInput1_cols_out_full_n : IN STD_LOGIC;
        imgInput1_cols_out_write : OUT STD_LOGIC;
        imgOutput1_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgOutput1_rows_out_full_n : IN STD_LOGIC;
        imgOutput1_rows_out_write : OUT STD_LOGIC;
        imgOutput1_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgOutput1_cols_out_full_n : IN STD_LOGIC;
        imgOutput1_cols_out_write : OUT STD_LOGIC;
        imgOutput2_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgOutput2_rows_out_full_n : IN STD_LOGIC;
        imgOutput2_rows_out_write : OUT STD_LOGIC;
        imgOutput2_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        imgOutput2_cols_out_full_n : IN STD_LOGIC;
        imgOutput2_cols_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2xfMat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_TVALID : IN STD_LOGIC;
        p_src_TREADY : OUT STD_LOGIC;
        p_src_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        p_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_empty_n : IN STD_LOGIC;
        img_rows_read : OUT STD_LOGIC;
        img_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_empty_n : IN STD_LOGIC;
        img_cols_read : OUT STD_LOGIC;
        img_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_V_full_n : IN STD_LOGIC;
        img_data_V_write : OUT STD_LOGIC;
        img_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_rows_out_full_n : IN STD_LOGIC;
        img_rows_out_write : OUT STD_LOGIC;
        img_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_cols_out_full_n : IN STD_LOGIC;
        img_cols_out_write : OUT STD_LOGIC );
    end component;


    component sobel_accel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_empty_n : IN STD_LOGIC;
        p_src_rows_read : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC;
        p_src_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_V_empty_n : IN STD_LOGIC;
        p_src_data_V_read : OUT STD_LOGIC;
        p_dstgx_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_dstgx_rows_empty_n : IN STD_LOGIC;
        p_dstgx_rows_read : OUT STD_LOGIC;
        p_dstgx_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_dstgx_cols_empty_n : IN STD_LOGIC;
        p_dstgx_cols_read : OUT STD_LOGIC;
        p_dstgx_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dstgx_data_V_full_n : IN STD_LOGIC;
        p_dstgx_data_V_write : OUT STD_LOGIC;
        p_dstgy_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_dstgy_cols_empty_n : IN STD_LOGIC;
        p_dstgy_cols_read : OUT STD_LOGIC;
        p_dstgy_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dstgy_data_V_full_n : IN STD_LOGIC;
        p_dstgy_data_V_write : OUT STD_LOGIC;
        p_dstgx_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_dstgx_rows_out_full_n : IN STD_LOGIC;
        p_dstgx_rows_out_write : OUT STD_LOGIC;
        p_dstgx_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_dstgx_cols_out_full_n : IN STD_LOGIC;
        p_dstgx_cols_out_write : OUT STD_LOGIC;
        p_dstgy_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_dstgy_cols_out_full_n : IN STD_LOGIC;
        p_dstgy_cols_out_write : OUT STD_LOGIC );
    end component;


    component xfMat2AXIvideo57 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_empty_n : IN STD_LOGIC;
        img_rows_read : OUT STD_LOGIC;
        img_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_empty_n : IN STD_LOGIC;
        img_cols_read : OUT STD_LOGIC;
        img_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_V_empty_n : IN STD_LOGIC;
        img_data_V_read : OUT STD_LOGIC;
        p_dst_x_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_x_TVALID : OUT STD_LOGIC;
        p_dst_x_TREADY : IN STD_LOGIC;
        p_dst_x_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_x_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_x_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_x_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_x_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_x_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component xfMat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_empty_n : IN STD_LOGIC;
        img_rows_read : OUT STD_LOGIC;
        img_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_empty_n : IN STD_LOGIC;
        img_cols_read : OUT STD_LOGIC;
        img_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_V_empty_n : IN STD_LOGIC;
        img_data_V_read : OUT STD_LOGIC;
        p_dst_y_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_y_TVALID : OUT STD_LOGIC;
        p_dst_y_TREADY : IN STD_LOGIC;
        p_dst_y_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_y_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_y_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_y_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_y_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        p_dst_y_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w32_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_sobel_ahbi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xfMat2Aibs IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xfMat2AjbC IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sobel_ip_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        width : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sobel_ip_AXILiteS_s_axi_U : component sobel_ip_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        height => height,
        width => width);

    Block_Mat_exit101_pr_U0 : component Block_Mat_exit101_pr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit101_pr_U0_ap_start,
        start_full_n => Block_Mat_exit101_pr_U0_start_full_n,
        ap_done => Block_Mat_exit101_pr_U0_ap_done,
        ap_continue => Block_Mat_exit101_pr_U0_ap_continue,
        ap_idle => Block_Mat_exit101_pr_U0_ap_idle,
        ap_ready => Block_Mat_exit101_pr_U0_ap_ready,
        start_out => Block_Mat_exit101_pr_U0_start_out,
        start_write => Block_Mat_exit101_pr_U0_start_write,
        height => height,
        width => width,
        imgInput1_rows_out_din => Block_Mat_exit101_pr_U0_imgInput1_rows_out_din,
        imgInput1_rows_out_full_n => imgInput1_rows_c_full_n,
        imgInput1_rows_out_write => Block_Mat_exit101_pr_U0_imgInput1_rows_out_write,
        imgInput1_cols_out_din => Block_Mat_exit101_pr_U0_imgInput1_cols_out_din,
        imgInput1_cols_out_full_n => imgInput1_cols_c_full_n,
        imgInput1_cols_out_write => Block_Mat_exit101_pr_U0_imgInput1_cols_out_write,
        imgOutput1_rows_out_din => Block_Mat_exit101_pr_U0_imgOutput1_rows_out_din,
        imgOutput1_rows_out_full_n => imgOutput1_rows_c_full_n,
        imgOutput1_rows_out_write => Block_Mat_exit101_pr_U0_imgOutput1_rows_out_write,
        imgOutput1_cols_out_din => Block_Mat_exit101_pr_U0_imgOutput1_cols_out_din,
        imgOutput1_cols_out_full_n => imgOutput1_cols_c_full_n,
        imgOutput1_cols_out_write => Block_Mat_exit101_pr_U0_imgOutput1_cols_out_write,
        imgOutput2_rows_out_din => Block_Mat_exit101_pr_U0_imgOutput2_rows_out_din,
        imgOutput2_rows_out_full_n => imgOutput2_rows_c_full_n,
        imgOutput2_rows_out_write => Block_Mat_exit101_pr_U0_imgOutput2_rows_out_write,
        imgOutput2_cols_out_din => Block_Mat_exit101_pr_U0_imgOutput2_cols_out_din,
        imgOutput2_cols_out_full_n => imgOutput2_cols_c_full_n,
        imgOutput2_cols_out_write => Block_Mat_exit101_pr_U0_imgOutput2_cols_out_write);

    AXIvideo2xfMat_U0 : component AXIvideo2xfMat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2xfMat_U0_ap_start,
        ap_done => AXIvideo2xfMat_U0_ap_done,
        ap_continue => AXIvideo2xfMat_U0_ap_continue,
        ap_idle => AXIvideo2xfMat_U0_ap_idle,
        ap_ready => AXIvideo2xfMat_U0_ap_ready,
        p_src_TDATA => p_src_TDATA,
        p_src_TVALID => p_src_TVALID,
        p_src_TREADY => AXIvideo2xfMat_U0_p_src_TREADY,
        p_src_TKEEP => p_src_TKEEP,
        p_src_TSTRB => p_src_TSTRB,
        p_src_TUSER => p_src_TUSER,
        p_src_TLAST => p_src_TLAST,
        p_src_TID => p_src_TID,
        p_src_TDEST => p_src_TDEST,
        img_rows_dout => imgInput1_rows_c_dout,
        img_rows_empty_n => imgInput1_rows_c_empty_n,
        img_rows_read => AXIvideo2xfMat_U0_img_rows_read,
        img_cols_dout => imgInput1_cols_c_dout,
        img_cols_empty_n => imgInput1_cols_c_empty_n,
        img_cols_read => AXIvideo2xfMat_U0_img_cols_read,
        img_data_V_din => AXIvideo2xfMat_U0_img_data_V_din,
        img_data_V_full_n => imgInput1_data_V_cha_full_n,
        img_data_V_write => AXIvideo2xfMat_U0_img_data_V_write,
        img_rows_out_din => AXIvideo2xfMat_U0_img_rows_out_din,
        img_rows_out_full_n => imgInput1_rows_c11_full_n,
        img_rows_out_write => AXIvideo2xfMat_U0_img_rows_out_write,
        img_cols_out_din => AXIvideo2xfMat_U0_img_cols_out_din,
        img_cols_out_full_n => imgInput1_cols_c12_full_n,
        img_cols_out_write => AXIvideo2xfMat_U0_img_cols_out_write);

    sobel_accel_U0 : component sobel_accel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sobel_accel_U0_ap_start,
        start_full_n => start_for_xfMat2AXIvideo57_U0_full_n,
        ap_done => sobel_accel_U0_ap_done,
        ap_continue => sobel_accel_U0_ap_continue,
        ap_idle => sobel_accel_U0_ap_idle,
        ap_ready => sobel_accel_U0_ap_ready,
        start_out => sobel_accel_U0_start_out,
        start_write => sobel_accel_U0_start_write,
        p_src_rows_dout => imgInput1_rows_c11_dout,
        p_src_rows_empty_n => imgInput1_rows_c11_empty_n,
        p_src_rows_read => sobel_accel_U0_p_src_rows_read,
        p_src_cols_dout => imgInput1_cols_c12_dout,
        p_src_cols_empty_n => imgInput1_cols_c12_empty_n,
        p_src_cols_read => sobel_accel_U0_p_src_cols_read,
        p_src_data_V_dout => imgInput1_data_V_cha_dout,
        p_src_data_V_empty_n => imgInput1_data_V_cha_empty_n,
        p_src_data_V_read => sobel_accel_U0_p_src_data_V_read,
        p_dstgx_rows_dout => imgOutput1_rows_c_dout,
        p_dstgx_rows_empty_n => imgOutput1_rows_c_empty_n,
        p_dstgx_rows_read => sobel_accel_U0_p_dstgx_rows_read,
        p_dstgx_cols_dout => imgOutput1_cols_c_dout,
        p_dstgx_cols_empty_n => imgOutput1_cols_c_empty_n,
        p_dstgx_cols_read => sobel_accel_U0_p_dstgx_cols_read,
        p_dstgx_data_V_din => sobel_accel_U0_p_dstgx_data_V_din,
        p_dstgx_data_V_full_n => imgOutput1_data_V_ch_full_n,
        p_dstgx_data_V_write => sobel_accel_U0_p_dstgx_data_V_write,
        p_dstgy_cols_dout => imgOutput2_cols_c_dout,
        p_dstgy_cols_empty_n => imgOutput2_cols_c_empty_n,
        p_dstgy_cols_read => sobel_accel_U0_p_dstgy_cols_read,
        p_dstgy_data_V_din => sobel_accel_U0_p_dstgy_data_V_din,
        p_dstgy_data_V_full_n => imgOutput2_data_V_ch_full_n,
        p_dstgy_data_V_write => sobel_accel_U0_p_dstgy_data_V_write,
        p_dstgx_rows_out_din => sobel_accel_U0_p_dstgx_rows_out_din,
        p_dstgx_rows_out_full_n => imgOutput1_rows_c13_full_n,
        p_dstgx_rows_out_write => sobel_accel_U0_p_dstgx_rows_out_write,
        p_dstgx_cols_out_din => sobel_accel_U0_p_dstgx_cols_out_din,
        p_dstgx_cols_out_full_n => imgOutput1_cols_c14_full_n,
        p_dstgx_cols_out_write => sobel_accel_U0_p_dstgx_cols_out_write,
        p_dstgy_cols_out_din => sobel_accel_U0_p_dstgy_cols_out_din,
        p_dstgy_cols_out_full_n => imgOutput2_cols_c15_full_n,
        p_dstgy_cols_out_write => sobel_accel_U0_p_dstgy_cols_out_write);

    xfMat2AXIvideo57_U0 : component xfMat2AXIvideo57
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => xfMat2AXIvideo57_U0_ap_start,
        ap_done => xfMat2AXIvideo57_U0_ap_done,
        ap_continue => xfMat2AXIvideo57_U0_ap_continue,
        ap_idle => xfMat2AXIvideo57_U0_ap_idle,
        ap_ready => xfMat2AXIvideo57_U0_ap_ready,
        img_rows_dout => imgOutput1_rows_c13_dout,
        img_rows_empty_n => imgOutput1_rows_c13_empty_n,
        img_rows_read => xfMat2AXIvideo57_U0_img_rows_read,
        img_cols_dout => imgOutput1_cols_c14_dout,
        img_cols_empty_n => imgOutput1_cols_c14_empty_n,
        img_cols_read => xfMat2AXIvideo57_U0_img_cols_read,
        img_data_V_dout => imgOutput1_data_V_ch_dout,
        img_data_V_empty_n => imgOutput1_data_V_ch_empty_n,
        img_data_V_read => xfMat2AXIvideo57_U0_img_data_V_read,
        p_dst_x_TDATA => xfMat2AXIvideo57_U0_p_dst_x_TDATA,
        p_dst_x_TVALID => xfMat2AXIvideo57_U0_p_dst_x_TVALID,
        p_dst_x_TREADY => p_dst_x_TREADY,
        p_dst_x_TKEEP => xfMat2AXIvideo57_U0_p_dst_x_TKEEP,
        p_dst_x_TSTRB => xfMat2AXIvideo57_U0_p_dst_x_TSTRB,
        p_dst_x_TUSER => xfMat2AXIvideo57_U0_p_dst_x_TUSER,
        p_dst_x_TLAST => xfMat2AXIvideo57_U0_p_dst_x_TLAST,
        p_dst_x_TID => xfMat2AXIvideo57_U0_p_dst_x_TID,
        p_dst_x_TDEST => xfMat2AXIvideo57_U0_p_dst_x_TDEST);

    xfMat2AXIvideo_U0 : component xfMat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => xfMat2AXIvideo_U0_ap_start,
        ap_done => xfMat2AXIvideo_U0_ap_done,
        ap_continue => xfMat2AXIvideo_U0_ap_continue,
        ap_idle => xfMat2AXIvideo_U0_ap_idle,
        ap_ready => xfMat2AXIvideo_U0_ap_ready,
        img_rows_dout => imgOutput2_rows_c_dout,
        img_rows_empty_n => imgOutput2_rows_c_empty_n,
        img_rows_read => xfMat2AXIvideo_U0_img_rows_read,
        img_cols_dout => imgOutput2_cols_c15_dout,
        img_cols_empty_n => imgOutput2_cols_c15_empty_n,
        img_cols_read => xfMat2AXIvideo_U0_img_cols_read,
        img_data_V_dout => imgOutput2_data_V_ch_dout,
        img_data_V_empty_n => imgOutput2_data_V_ch_empty_n,
        img_data_V_read => xfMat2AXIvideo_U0_img_data_V_read,
        p_dst_y_TDATA => xfMat2AXIvideo_U0_p_dst_y_TDATA,
        p_dst_y_TVALID => xfMat2AXIvideo_U0_p_dst_y_TVALID,
        p_dst_y_TREADY => p_dst_y_TREADY,
        p_dst_y_TKEEP => xfMat2AXIvideo_U0_p_dst_y_TKEEP,
        p_dst_y_TSTRB => xfMat2AXIvideo_U0_p_dst_y_TSTRB,
        p_dst_y_TUSER => xfMat2AXIvideo_U0_p_dst_y_TUSER,
        p_dst_y_TLAST => xfMat2AXIvideo_U0_p_dst_y_TLAST,
        p_dst_y_TID => xfMat2AXIvideo_U0_p_dst_y_TID,
        p_dst_y_TDEST => xfMat2AXIvideo_U0_p_dst_y_TDEST);

    imgInput1_rows_c_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit101_pr_U0_imgInput1_rows_out_din,
        if_full_n => imgInput1_rows_c_full_n,
        if_write => Block_Mat_exit101_pr_U0_imgInput1_rows_out_write,
        if_dout => imgInput1_rows_c_dout,
        if_empty_n => imgInput1_rows_c_empty_n,
        if_read => AXIvideo2xfMat_U0_img_rows_read);

    imgInput1_cols_c_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit101_pr_U0_imgInput1_cols_out_din,
        if_full_n => imgInput1_cols_c_full_n,
        if_write => Block_Mat_exit101_pr_U0_imgInput1_cols_out_write,
        if_dout => imgInput1_cols_c_dout,
        if_empty_n => imgInput1_cols_c_empty_n,
        if_read => AXIvideo2xfMat_U0_img_cols_read);

    imgOutput1_rows_c_U : component fifo_w32_d3_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit101_pr_U0_imgOutput1_rows_out_din,
        if_full_n => imgOutput1_rows_c_full_n,
        if_write => Block_Mat_exit101_pr_U0_imgOutput1_rows_out_write,
        if_dout => imgOutput1_rows_c_dout,
        if_empty_n => imgOutput1_rows_c_empty_n,
        if_read => sobel_accel_U0_p_dstgx_rows_read);

    imgOutput1_cols_c_U : component fifo_w32_d3_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit101_pr_U0_imgOutput1_cols_out_din,
        if_full_n => imgOutput1_cols_c_full_n,
        if_write => Block_Mat_exit101_pr_U0_imgOutput1_cols_out_write,
        if_dout => imgOutput1_cols_c_dout,
        if_empty_n => imgOutput1_cols_c_empty_n,
        if_read => sobel_accel_U0_p_dstgx_cols_read);

    imgOutput2_rows_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit101_pr_U0_imgOutput2_rows_out_din,
        if_full_n => imgOutput2_rows_c_full_n,
        if_write => Block_Mat_exit101_pr_U0_imgOutput2_rows_out_write,
        if_dout => imgOutput2_rows_c_dout,
        if_empty_n => imgOutput2_rows_c_empty_n,
        if_read => xfMat2AXIvideo_U0_img_rows_read);

    imgOutput2_cols_c_U : component fifo_w32_d3_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit101_pr_U0_imgOutput2_cols_out_din,
        if_full_n => imgOutput2_cols_c_full_n,
        if_write => Block_Mat_exit101_pr_U0_imgOutput2_cols_out_write,
        if_dout => imgOutput2_cols_c_dout,
        if_empty_n => imgOutput2_cols_c_empty_n,
        if_read => sobel_accel_U0_p_dstgy_cols_read);

    imgInput1_data_V_cha_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_U0_img_data_V_din,
        if_full_n => imgInput1_data_V_cha_full_n,
        if_write => AXIvideo2xfMat_U0_img_data_V_write,
        if_dout => imgInput1_data_V_cha_dout,
        if_empty_n => imgInput1_data_V_cha_empty_n,
        if_read => sobel_accel_U0_p_src_data_V_read);

    imgInput1_rows_c11_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_U0_img_rows_out_din,
        if_full_n => imgInput1_rows_c11_full_n,
        if_write => AXIvideo2xfMat_U0_img_rows_out_write,
        if_dout => imgInput1_rows_c11_dout,
        if_empty_n => imgInput1_rows_c11_empty_n,
        if_read => sobel_accel_U0_p_src_rows_read);

    imgInput1_cols_c12_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2xfMat_U0_img_cols_out_din,
        if_full_n => imgInput1_cols_c12_full_n,
        if_write => AXIvideo2xfMat_U0_img_cols_out_write,
        if_dout => imgInput1_cols_c12_dout,
        if_empty_n => imgInput1_cols_c12_empty_n,
        if_read => sobel_accel_U0_p_src_cols_read);

    imgOutput1_data_V_ch_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sobel_accel_U0_p_dstgx_data_V_din,
        if_full_n => imgOutput1_data_V_ch_full_n,
        if_write => sobel_accel_U0_p_dstgx_data_V_write,
        if_dout => imgOutput1_data_V_ch_dout,
        if_empty_n => imgOutput1_data_V_ch_empty_n,
        if_read => xfMat2AXIvideo57_U0_img_data_V_read);

    imgOutput2_data_V_ch_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sobel_accel_U0_p_dstgy_data_V_din,
        if_full_n => imgOutput2_data_V_ch_full_n,
        if_write => sobel_accel_U0_p_dstgy_data_V_write,
        if_dout => imgOutput2_data_V_ch_dout,
        if_empty_n => imgOutput2_data_V_ch_empty_n,
        if_read => xfMat2AXIvideo_U0_img_data_V_read);

    imgOutput1_rows_c13_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sobel_accel_U0_p_dstgx_rows_out_din,
        if_full_n => imgOutput1_rows_c13_full_n,
        if_write => sobel_accel_U0_p_dstgx_rows_out_write,
        if_dout => imgOutput1_rows_c13_dout,
        if_empty_n => imgOutput1_rows_c13_empty_n,
        if_read => xfMat2AXIvideo57_U0_img_rows_read);

    imgOutput1_cols_c14_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sobel_accel_U0_p_dstgx_cols_out_din,
        if_full_n => imgOutput1_cols_c14_full_n,
        if_write => sobel_accel_U0_p_dstgx_cols_out_write,
        if_dout => imgOutput1_cols_c14_dout,
        if_empty_n => imgOutput1_cols_c14_empty_n,
        if_read => xfMat2AXIvideo57_U0_img_cols_read);

    imgOutput2_cols_c15_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sobel_accel_U0_p_dstgy_cols_out_din,
        if_full_n => imgOutput2_cols_c15_full_n,
        if_write => sobel_accel_U0_p_dstgy_cols_out_write,
        if_dout => imgOutput2_cols_c15_dout,
        if_empty_n => imgOutput2_cols_c15_empty_n,
        if_read => xfMat2AXIvideo_U0_img_cols_read);

    start_for_sobel_ahbi_U : component start_for_sobel_ahbi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_sobel_accel_U0_din,
        if_full_n => start_for_sobel_accel_U0_full_n,
        if_write => Block_Mat_exit101_pr_U0_start_write,
        if_dout => start_for_sobel_accel_U0_dout,
        if_empty_n => start_for_sobel_accel_U0_empty_n,
        if_read => sobel_accel_U0_ap_ready);

    start_for_xfMat2Aibs_U : component start_for_xfMat2Aibs
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xfMat2AXIvideo_U0_din,
        if_full_n => start_for_xfMat2AXIvideo_U0_full_n,
        if_write => Block_Mat_exit101_pr_U0_start_write,
        if_dout => start_for_xfMat2AXIvideo_U0_dout,
        if_empty_n => start_for_xfMat2AXIvideo_U0_empty_n,
        if_read => xfMat2AXIvideo_U0_ap_ready);

    start_for_xfMat2AjbC_U : component start_for_xfMat2AjbC
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xfMat2AXIvideo57_U0_din,
        if_full_n => start_for_xfMat2AXIvideo57_U0_full_n,
        if_write => sobel_accel_U0_start_write,
        if_dout => start_for_xfMat2AXIvideo57_U0_dout,
        if_empty_n => start_for_xfMat2AXIvideo57_U0_empty_n,
        if_read => xfMat2AXIvideo57_U0_ap_ready);





    ap_sync_reg_AXIvideo2xfMat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIvideo2xfMat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2xfMat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2xfMat_U0_ap_ready <= ap_sync_AXIvideo2xfMat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_Mat_exit101_pr_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_Mat_exit101_pr_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_Mat_exit101_pr_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_Mat_exit101_pr_U0_ap_ready <= ap_sync_Block_Mat_exit101_pr_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIvideo2xfMat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = AXIvideo2xfMat_U0_ap_ready))) then 
                AXIvideo2xfMat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2xfMat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = AXIvideo2xfMat_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                AXIvideo2xfMat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2xfMat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Block_Mat_exit101_pr_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_Mat_exit101_pr_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_Mat_exit101_pr_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit101_pr_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_Mat_exit101_pr_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_Mat_exit101_pr_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit101_pr_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIvideo2xfMat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2xfMat_U0_ap_start <= ((ap_sync_reg_AXIvideo2xfMat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    AXIvideo2xfMat_U0_start_full_n <= ap_const_logic_1;
    AXIvideo2xfMat_U0_start_write <= ap_const_logic_0;
    Block_Mat_exit101_pr_U0_ap_continue <= ap_const_logic_1;
    Block_Mat_exit101_pr_U0_ap_start <= ((ap_sync_reg_Block_Mat_exit101_pr_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_Mat_exit101_pr_U0_start_full_n <= (start_for_xfMat2AXIvideo_U0_full_n and start_for_sobel_accel_U0_full_n);
    ap_done <= ap_sync_done;
    ap_idle <= (xfMat2AXIvideo_U0_ap_idle and xfMat2AXIvideo57_U0_ap_idle and sobel_accel_U0_ap_idle and Block_Mat_exit101_pr_U0_ap_idle and AXIvideo2xfMat_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIvideo2xfMat_U0_ap_ready <= (ap_sync_reg_AXIvideo2xfMat_U0_ap_ready or AXIvideo2xfMat_U0_ap_ready);
    ap_sync_Block_Mat_exit101_pr_U0_ap_ready <= (ap_sync_reg_Block_Mat_exit101_pr_U0_ap_ready or Block_Mat_exit101_pr_U0_ap_ready);
    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (xfMat2AXIvideo_U0_ap_done and xfMat2AXIvideo57_U0_ap_done);
    ap_sync_ready <= (ap_sync_Block_Mat_exit101_pr_U0_ap_ready and ap_sync_AXIvideo2xfMat_U0_ap_ready);
    p_dst_x_TDATA <= xfMat2AXIvideo57_U0_p_dst_x_TDATA;
    p_dst_x_TDEST <= xfMat2AXIvideo57_U0_p_dst_x_TDEST;
    p_dst_x_TID <= xfMat2AXIvideo57_U0_p_dst_x_TID;
    p_dst_x_TKEEP <= xfMat2AXIvideo57_U0_p_dst_x_TKEEP;
    p_dst_x_TLAST <= xfMat2AXIvideo57_U0_p_dst_x_TLAST;
    p_dst_x_TSTRB <= xfMat2AXIvideo57_U0_p_dst_x_TSTRB;
    p_dst_x_TUSER <= xfMat2AXIvideo57_U0_p_dst_x_TUSER;
    p_dst_x_TVALID <= xfMat2AXIvideo57_U0_p_dst_x_TVALID;
    p_dst_y_TDATA <= xfMat2AXIvideo_U0_p_dst_y_TDATA;
    p_dst_y_TDEST <= xfMat2AXIvideo_U0_p_dst_y_TDEST;
    p_dst_y_TID <= xfMat2AXIvideo_U0_p_dst_y_TID;
    p_dst_y_TKEEP <= xfMat2AXIvideo_U0_p_dst_y_TKEEP;
    p_dst_y_TLAST <= xfMat2AXIvideo_U0_p_dst_y_TLAST;
    p_dst_y_TSTRB <= xfMat2AXIvideo_U0_p_dst_y_TSTRB;
    p_dst_y_TUSER <= xfMat2AXIvideo_U0_p_dst_y_TUSER;
    p_dst_y_TVALID <= xfMat2AXIvideo_U0_p_dst_y_TVALID;
    p_src_TREADY <= AXIvideo2xfMat_U0_p_src_TREADY;
    sobel_accel_U0_ap_continue <= ap_const_logic_1;
    sobel_accel_U0_ap_start <= start_for_sobel_accel_U0_empty_n;
    start_for_sobel_accel_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xfMat2AXIvideo57_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xfMat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    xfMat2AXIvideo57_U0_ap_continue <= ap_sync_done;
    xfMat2AXIvideo57_U0_ap_start <= start_for_xfMat2AXIvideo57_U0_empty_n;
    xfMat2AXIvideo57_U0_start_full_n <= ap_const_logic_1;
    xfMat2AXIvideo57_U0_start_write <= ap_const_logic_0;
    xfMat2AXIvideo_U0_ap_continue <= ap_sync_done;
    xfMat2AXIvideo_U0_ap_start <= start_for_xfMat2AXIvideo_U0_empty_n;
    xfMat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    xfMat2AXIvideo_U0_start_write <= ap_const_logic_0;
end behav;
